Il y a des affiches annonçant des colloques de sécurité informatique,
de petites annonces et quelques messages destinés aux utilisateurs des
locaux.  L'un d'entre eux dit notamment 

    MESSAGE IMPORTANT POUR LES UTILISATEURS DE LA SALLE RC-25
    ---------------------------------------------------------

    - stacylyons 29c7cc80b03f633570f7e9c6fb59bef74fd7174b0b0704d0569660fea708e71ab4b5068b9403c3245dfd96dbab8ea0fd9ad1c37c0e290e631657bcd51b66a30b6f2a7ce3b310d2760ae9c4014a470f8561e46876ceadf7e1e103cf80f8cb10e961a5ad1326a3ef6db0994d7783b967c92edd3f112690a9751feef0018219647be607f3d52828935c69a83af69bf4d84488829b95879a79c9d05a5f7f912abb4c8c53e53cd2f0fa5d3e88ea8169e4ecb60c9bddbd63a25e326e3a4481927dc3ada0da850c6847bf21bb591f1258604d0a73e51c2929c458f6fcdf58acc1203596a184e4b0ecbbb51e79f0152b94c6c02c279c46a9e5ac7188ca16f05456c28693
    - burgessjulie 143841af22299df6d3959779fb9f3ff5265a5d051c9eb293734338b6bea2287b74c0199437fc1d55b90c70b2ff79da3651f0119732131c0a52ff95d4f7774d50e75df53c07522e4c78e63c3b07c8b4a4a234265308da4bace4988a8710821c85e6cf251f55b67cbfece9ea16d25edbf6f87d6f03af6c0601e14c4001d81ae1f2bec70be3a255de1e543408474c61ef89ab02a19ae96744e89e201e8fdcc5f4c6184572e23477e0cd27b844c82a25dd518a401cbd8dfdf5c698831d68e446d3c7069a79975c9d47a5d57a7ac908dd8209f3a7501e5e71325c0feb9f7e809423db709ac6db71810386fa5a34e4bfd44be2d39adab4a94a4fe83723c95b2b07a861


Trouver e1 et e2
Calculer t_1 et t_2
Puis calculer c1^t1*c2^t_2

La formule magique est  ``CRT dans les exposants''.

En clair, cherchez une relation de Bezout u*e1 + v*e2 == 1.

Après, vous avez c1 == m**e1 mod N et c2 == m**e2 mod N.  Par conséquent,
c1**u * c2**v == m**(u*e1 + v*e2) == m mod N.  Et boum.

Rappel  m**(-42) == (m**42)**(-1) == (m**(-1))**42 mod N

009a494362c3812460f34e2fd20cafd2050000000000003efbe01344850cfbef81

00cb005712c3e7f45cc873cfb89b053f010000000000003efbe01344850cfbef81



______________________________________
Dans le bureau

Le MAC qui accompagne chaque entrée du journal des évènements de sécurité
fait 256 bits.  Il se décompose en fait en 4 blocs de 64 bits chacun :
- le premier (octets [0:8]) est obtenu en évaluant un véritable MAC. Celui-ci
                           [--------REDACTED--------]
- les 3 autres blocs contiennent des parts d'un secret partagé avec le
  système de partage de secret de Shamir.
Plus précisément, si on note :
- p : le nombre 2**64 - 59 (qui est premier),
- X : les bits [0:64] du MAC,
- A : les bits [64:128] du MAC,
- B : les bits [128:192] du MAC,
- C : les bits [192:256] du MAC.
Alors A == R(X) mod p, où R est un polynôme de degré 8 inconnu.
Alors B == S(X) mod p, où S est un polynôme de degré 16 inconnu.
Alors C == T(X) mod p, où T est un polynôme de degré 24 inconnu.
Les coefficients constants de R, S et T sont des "firmware update keys", qui
                           [--------REDACTED--------]
Pour reconstituer ces coefficients, qui sont en fait R(0), S(0) et T(0), on
                           [--------REDACTED--------]
                           [--------REDACTED--------]

>>>conseil
Ceci affirme qu'avec 9 flags, on peut fabriquer une "firmware update key",
puis qu'avec 17 flags on peut en fabriquer une autre, etc.

Il faut donc implanter la reconstruction de partage de secret de Shamir.

Cela peut se faire de deux manières : soit avec les polynômes interpolateurs
de Lagrange, soit en résolvant un système linéaire.  Dans les deux cas,
l'utilisation d'un logiciel de calcul formel (comme SageMath) est fortement
recommandée.  Il n'y a pas beaucoup de bibliothèques python capable de faire
le job directement.